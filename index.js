import express from "express";
import fetch from "node-fetch";

const app = express();
const PORT = process.env.PORT || 10000;

// Mapa emoji dla znak√≥w zodiaku
const emojiMap = {
  baran: "‚ôà",
  byk: "‚ôâ",
  bliznieta: "‚ôä",
  rak: "‚ôã",
  lew: "‚ôå",
  panna: "‚ôç",
  waga: "‚ôé",
  skorpion: "‚ôè",
  strzelec: "‚ôê",
  koziorozec: "‚ôë",
  wodnik: "‚ôí",
  ryby: "‚ôì"
};

// Lista dostƒôpnych znak√≥w (po polsku, jak w API)
const validSigns = Object.keys(emojiMap);

app.get("/:sign", async (req, res) => {
  try {
    const sign = req.params.sign.toLowerCase();

    if (!validSigns.includes(sign)) {
      return res.send("‚ùå Nieznany znak zodiaku! (np. panna, rak, lew...)");
    }

    // Pobranie danych z API
    const apiUrl = "https://www.moj-codzienny-horoskop.com/webmaster/api_JSON.php?type=1&sign=" + sign;
    const response = await fetch(apiUrl);
    const data = await response.json();

    if (!data.signs || !Array.isArray(data.signs)) {
      return res.send("‚ùå B≈ÇƒÖd przy pobieraniu horoskopu!");
    }

    const horoscope = data.signs.find(s => s.title.toLowerCase() === sign);
    if (!horoscope) {
      return res.send("‚ùå Brak horoskopu dla tego znaku.");
    }

    const emoji = emojiMap[sign] || "‚ú®";
    let prediction = horoscope.prediction.replace(/<[^>]+>/g, "").trim();

    // Usuwamy ko≈Ñc√≥wkƒô "Czytaj wiƒôcej o ..."
    prediction = prediction.replace(/Czytaj wiƒôcej.+$/i, "").trim();

    // Odpowied≈∫ dla StreamElements
    res.send(
      `üîÆ Horoskop na dzi≈õ ${emoji} ${horoscope.title}: ${prediction} | ≈πr√≥d≈Ço: moj-codzienny-horoskop.com`
    );

  } catch (err) {
    console.error("B≈ÇƒÖd serwera:", err);
    res.send("‚ùå Wewnƒôtrzny b≈ÇƒÖd serwera przy pobieraniu horoskopu.");
  }
});

app.listen(PORT, () => {
  console.log(`‚úÖ Server running on port ${PORT}`);
});
